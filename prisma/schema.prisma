// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  profile    Profile? // This is a one-to-one relation
  username   String   @unique
  email      String   @unique
  passhash   String   @default("") // This is a placeholder for the password hash
  passphrase String   @default("") // This is a placeholder for the password salt for OTP generation
  user_role  UserRole @default(STUDENT)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  auth_sessions                       AuthSession[]
  enrolled_course_sections_as_student CourseSectionEnrollment[]
  assigned_course_sections_as_faculty CourseSectionFacultyAssignment[]
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

model Profile {
  id                Int       @id @default(autoincrement())
  user_id           Int       @unique
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade) // On delete user, delete profile
  first_name        String
  last_name         String?
  bio               String?
  dob               DateTime?
  phone             String
  secondary_phone   String?
  secondary_email   String?
  address           String
  secondary_address String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model AuthSession {
  id         Int       @id @default(autoincrement())
  user_id    Int
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade) // On delete user, delete session
  token      String    @unique
  expired_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Course {
  id                 Int             @id @default(autoincrement())
  course_title       String
  course_description String?
  course_cover_url   String?
  course_start_date  DateTime
  course_end_date    DateTime
  course_code        String
  course_credits     Float
  course_status      CourseStatus    @default(PLANNED)
  course_sections    CourseSection[]
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
}

enum CourseStatus {
  PLANNED
  ENROLLING
  ONGOING
  COMPLETED
}

model CourseSection {
  id                                 Int                              @id @default(autoincrement())
  course_id                          Int
  course                             Course                           @relation(fields: [course_id], references: [id], onDelete: Cascade) // On delete course, delete section
  section_title                      String
  section_description                String?
  section_total_seats                Int
  created_at                         DateTime                         @default(now())
  updated_at                         DateTime                         @updatedAt
  course_section_material            CourseSectionMaterial[]
  course_section_student_enrollments CourseSectionEnrollment[]
  course_section_faculty_assignments CourseSectionFacultyAssignment[]
}

model CourseSectionEnrollment {
  id                Int              @id @default(autoincrement())
  section_id        Int
  section           CourseSection    @relation(fields: [section_id], references: [id], onDelete: Cascade) // On delete section, delete enrollment
  user_id           Int
  user              User             @relation(fields: [user_id], references: [id], onDelete: Cascade) // On delete user, delete enrollment
  enrollment_status EnrollmentStatus @default(PENDING)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
}

enum EnrollmentStatus {
  PENDING
  ENROLLED
  DROPPED
  COMPLETED
}

model CourseSectionFacultyAssignment {
  id           Int           @id @default(autoincrement())
  section_id   Int
  section      CourseSection @relation(fields: [section_id], references: [id], onDelete: Cascade) // On delete section, delete faculty assignment
  faculty_id   Int
  faculty      User          @relation(fields: [faculty_id], references: [id], onDelete: Cascade) // On delete faculty, delete faculty assignment
  faculty_role FacultyRole   @default(INSTRUCTOR)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

enum FacultyRole {
  INSTRUCTOR
  TEACHING_ASSISTANT
}

model CourseSectionMaterial {
  id                   Int           @id @default(autoincrement())
  section_id           Int
  section              CourseSection @relation(fields: [section_id], references: [id], onDelete: Cascade) // On delete section, delete material
  material_title       String
  material_description String?
  material_url         String
  material_type        MaterialType  @default(FILE)
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
}

enum MaterialType {
  FILE
  IMAGE
  VIDEO
  LINK
}
